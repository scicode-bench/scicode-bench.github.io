{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SciCode: A Research Coding Benchmark Curated by Scientists","text":"<p> Minyang Tian<sup>1,2*\u2021</sup>, Luyu Gao<sup>3*</sup>, Shizhuo Dylan Zhang<sup>1</sup>, Xinan Chen<sup>1\u2020</sup>, Cunwei Fan<sup>1\u2020</sup>, Xuefei Guo<sup>1\u2020</sup>, Roland Haas<sup>1\u2020</sup>, Pan Ji<sup>4\u2020</sup>, Kittithat Krongchon<sup>1\u2020</sup>, Yao Li<sup>1\u2020</sup>, Shengyan Liu<sup>1\u2020</sup>, Di Luo<sup>5,6,11\u2020</sup>, Yutao Ma<sup>7\u2020</sup>, Hao Tong<sup>1\u2020</sup>, Kha Trinh<sup>7\u2020</sup>, Chenyu Tian<sup>8\u2020</sup>, Zihan Wang<sup>1\u2020</sup>, Bohao Wu<sup>1\u2020</sup>, Yanyu Xiong<sup>9\u2020</sup>, Shengzhu Yin<sup>1\u2020</sup>, Minhui Zhu<sup>1\u2020</sup>, Kilian Lieret<sup>10</sup>, Yanxin Lu<sup>1</sup>, Genglin Liu<sup>1</sup>, Yufeng Du<sup>1</sup>, Tianhua Tao<sup>1</sup>, Ofir Press<sup>10</sup>, Jamie Callan<sup>3</sup>, Eliu Huerta<sup>1,2,7\u2021</sup>, Hao Peng<sup>1\u2021</sup> </p> <p> <sup>1</sup>University of Illinois Urbana-Champaign   <sup>2</sup>Argonne National Laboratory   <sup>3</sup>Carnegie Mellon University   <sup>4</sup>University of North Carolina at Chapel Hill   <sup>5</sup>Massachusetts Institute of Technology   <sup>6</sup>Harvard University   <sup>7</sup>University of Chicago   <sup>8</sup>University of Texas at Austin   <sup>9</sup>Stanford University   <sup>10</sup>Princeton University   <sup>11</sup>The NSF AI Institute for Artificial Intelligence and Fundamental Interactions   </p> <p> * Equal contribution lead authors. \u2020 Data curation, alphabetical order. \u2021 Corresponding to: {mtian8, haopeng}@illinois.edu, elihu@anl.gov </p> <ul> <li> <p> Leaderboard</p> <p>How good are LMs at science, really?</p> <p> Browse the results</p> </li> <li> <p> Paper</p> <p>Learn all the details</p> <p> Read the paper</p> </li> </ul> <ul> <li> <p> Installation &amp; usage</p> <p>Learn how to evaluate your model</p> <p> Read the docs</p> </li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>SciCode is a newly developed benchmark designed to evaluate the capabilities of language models (LMs) in generating code for solving realistic scientific research problems. It has a diverse coverage of 6 domains: Physics, Math, Material Science, Biology, and Chemistry. They span 16 diverse natural science sub-fields. Unlike previous benchmarks that consist of question-answer pairs, SciCode problems naturally factorize into multiple subproblems, each involving knowledge recall, reasoning, and code synthesis. In total, SciCode contains 338 subproblems decomposed from 80 challenging main problems, and it offers optional descriptions specifying useful scientific background information and scientist-annotated gold-standard solutions and test cases for evaluation. Claude3.5-Sonnet, the best-performing model among those tested, can solve only 4.6% of the problems in the most realistic setting. </p>"},{"location":"#overview","title":"Overview","text":""},{"location":"#benchmark-statistics","title":"Benchmark Statistics","text":"Fields Subfields Mathematics Numerical Linear Algebra (7), Computational Mechanics (6), Computational Finance (1) Physics Condensed Matter Physics (13), Optics (10), Quantum Information/Computing (6), Computational Physics (5), Astrophysics (2), Particle Physics (1) Chemistry Quantum Chemistry (5), Computational Chemistry (3) Biology Ecology (6), Biochemistry (1), Genetics (1) Material Science Semiconductor Materials (7), Molecular Modeling (6) <p>Nobel prized related problems:</p>"},{"location":"#numerical-linear-algebra","title":"Numerical Linear Algebra","text":"<p>1. 2. 3. 4. 5. 6. 7.</p>"},{"location":"#computational-mechanics","title":"Computational Mechanics","text":"<p>1. 2. 3. 4. 5. 6.</p>"},{"location":"#computational-finance","title":"Computational Finance","text":"<p>1.</p>"},{"location":"#condensed-matter-physics","title":"Condensed Matter Physics","text":"<p>1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13.</p>"},{"location":"#optics","title":"Optics","text":"<p>1. 2. 3. 4. 5. 6. 7. 8. 9. 10.</p>"},{"location":"#quantum-informationcomputing","title":"Quantum Information/Computing","text":"<p>1. 2. 3. 4. 5. 6.</p>"},{"location":"#computational-physics","title":"Computational Physics","text":"<p>1. 2. 3. 4. 5.</p>"},{"location":"#astrophysics","title":"Astrophysics","text":"<p>1. 2.</p>"},{"location":"#particle-physics","title":"Particle Physics","text":"<p>1.</p>"},{"location":"#quantum-chemistry","title":"Quantum Chemistry","text":"<p>1. 2. 3. 4. 5.</p>"},{"location":"#computational-chemistry","title":"Computational Chemistry","text":"<p>1. 2. 3.</p>"},{"location":"#ecology","title":"Ecology","text":"<p>1. 2. 3. 4. 5. 6.</p>"},{"location":"#biochemistry","title":"Biochemistry","text":"<p>1.</p>"},{"location":"#genetics","title":"Genetics","text":"<p>1.</p>"},{"location":"#semiconductor-materials","title":"Semiconductor Materials","text":"<p>1. 2. 3. 4. 5. 6. 7.</p>"},{"location":"#molecular-modeling","title":"Molecular Modeling","text":"<p>1. 2. 3. 4. 5. 6.</p>"},{"location":"#example-problem","title":"Example Problem","text":""},{"location":"#main-problem-and-dependencies","title":"Main Problem and Dependencies","text":"<p>1. Generate an array of Chern numbers for the Haldane model on a hexagonal lattice by sweeping the following parameters: the on-site energy to next-nearest-neighbor coupling constant ratio ($m/t_2$ from -6 to 6 with $N$ samples) and the phase ($\\phi$ from -$\\pi$ to $\\pi$ with $N$ samples) values. Given the lattice spacing $a$, the nearest-neighbor coupling constant $t_1$, the next-nearest-neighbor coupling constant $t_2$, the grid size $\\delta$ for discretizing the Brillouin zone in the $k_x$ and $k_y$ directions (assuming the grid sizes are the same in both directions), and the number of sweeping grid points $N$ for $m/t_2$ and $\\phi$.</p> <p><pre><code>'''\nInputs:\ndelta : float\n    The grid size in kx and ky axis for discretizing the Brillouin zone.\na : float\n    The lattice spacing, i.e., the length of one side of the hexagon.\nt1 : float\n    The nearest-neighbor coupling constant.\nt2 : float\n    The next-nearest-neighbor coupling constant.\nN : int\n    The number of sweeping grid points for both the on-site energy to next-nearest-neighbor coupling constant ratio and phase.\n\nOutputs:\nresults: matrix of shape(N, N)\n    The Chern numbers by sweeping the on-site energy to next-nearest-neighbor coupling constant ratio (m/t2) and phase (phi).\nm_values: array of length N\n    The swept on-site energy to next-nearest-neighbor coupling constant ratios.\nphi_values: array of length N\n    The swept phase values.\n'''\n</code></pre> <pre><code># Package Dependencies\nimport numpy as np\nimport cmath\nfrom math import pi, sin, cos, sqrt\n</code></pre></p>"},{"location":"#subproblems","title":"Subproblems","text":"<p>1.1 Write a Haldane model Hamiltonian on a hexagonal lattice, given the following parameters: wavevector components $$k_x$$ and $k_y$ (momentum) in the x and y directions, lattice spacing $a$, nearest-neighbor coupling constant $t_1$, next-nearest-neighbor coupling constant $t_2$, phase $\\phi$ for the next-nearest-neighbor hopping, and the on-site energy $m$.</p> <p>Scientists Annotated Background: Source: Haldane, F. D. M. (1988). Model for a quantum Hall effect without Landau levels: Condensed-matter realization of the\" parity anomaly\". Physical review letters, 61(18).</p> <p>We denote ${\\mathbf{a}_i}$ are the vectors from a B site to its three nearest-neighbor A sites, and ${\\mathbf{b}_i}$ are next-nearest-neighbor distance vectors, then we have $$ {\\mathbf{a}_1} = (0,a),{\\mathbf{a}_2} = (\\sqrt 3 a/2, - a/2),{\\mathbf{a}_3} = ( - \\sqrt 3 a/2, - a/2)\\ {\\mathbf{b}_1} = {\\mathbf{a}_2} - {\\mathbf{a}_3} = (\\sqrt 3 a,0),{\\mathbf{b}_2} = {\\mathbf{a}_3} - {\\mathbf{a}_1} = ( - \\sqrt 3 a/2, - 3a/2),{\\mathbf{b}_3} = {\\mathbf{a}_1} - {\\mathbf{a}_2} = ( - \\sqrt 3 a/2,3a/2) $$</p> <p>Then the Haldane model on a hexagonal lattice can be written as $$H(k) = {d_0}I + {d_1}{\\sigma _1} + {d_2}{\\sigma _2} + {d_3}{\\sigma _3}$$ $${d_0} = 2{t_2}\\cos \\phi \\sum\\nolimits_i {\\cos (\\mathbf{k} \\cdot {\\mathbf{b}_i})}  = 2{t_2}\\cos \\phi \\left[ {\\cos \\left( {\\sqrt 3 {k_x}a} \\right) + \\cos \\left( { - \\sqrt 3 {k_x}a/2 + 3{k_y}a/2} \\right) + \\cos \\left( { - \\sqrt 3 {k_x}a/2 - 3{k_y}a/2} \\right)} \\right]$$ $$ {d_1} = {t_1}\\sum\\nolimits_i {\\cos (\\mathbf{k} \\cdot {\\mathbf{a}_i})}  = {t_1}\\left[ {\\cos \\left( {{k_y}a} \\right) + \\cos \\left( {\\sqrt 3 {k_x}a/2 - {k_y}a/2} \\right) + \\cos \\left( { - \\sqrt 3 {k_x}a/2 - {k_y}a/2} \\right)} \\right]\\ {d_2} = {t_1}\\sum\\nolimits_i {\\sin (\\mathbf{k} \\cdot {\\mathbf{a}_i})}  = {t_1}\\left[ {\\sin \\left( {{k_y}a} \\right) + \\sin \\left( {\\sqrt 3 {k_x}a/2 - {k_y}a/2} \\right) + \\sin \\left( { - \\sqrt 3 {k_x}a/2 - {k_y}a/2} \\right)} \\right] \\ {d_3} = m - 2{t_2}\\sin \\phi \\sum\\nolimits_i {\\sin (\\mathbf{k} \\cdot {\\mathbf{b}_i})}  = m - 2{t_2}\\sin \\phi \\left[ {\\sin \\left( {\\sqrt 3 {k_x}a} \\right) + \\sin \\left( { - \\sqrt 3 {k_x}a/2 + 3{k_y}a/2} \\right) + \\sin \\left( { - \\sqrt 3 {k_x}a/2 - 3{k_y}a/2} \\right)} \\right] \\ $$</p> <p>where $\\sigma_i$ are the Pauli matrices and $I$ is the identity matrix. <pre><code>def calc_hamiltonian(kx, ky, a, t1, t2, phi, m):\n    \"\"\"\n    Function to generate the Haldane Hamiltonian with a given set of parameters.\n\n    Inputs:\n    kx : float\n        The x component of the wavevector.\n    ky : float\n        The y component of the wavevector.\n    a : float\n        The lattice spacing, i.e., the length of one side of the hexagon.\n    t1 : float\n        The nearest-neighbor coupling constant.\n    t2 : float\n        The next-nearest-neighbor coupling constant.\n    phi : float\n        The phase ranging from -\u03c0 to \u03c0.\n    m : float\n        The on-site energy.\n\n    Output:\n    hamiltonian : matrix of shape(2, 2)\n        The Haldane Hamiltonian on a hexagonal lattice.\n    \"\"\"\n</code></pre> <pre><code># test case 1\nkx = 1\nky = 1\na = 1\nt1 = 1\nt2 = 0.3\nphi = 1\nm = 1\nassert np.allclose(calc_hamiltonian(kx, ky, a, t1, t2, phi, m), target)\n</code></pre> <pre><code># Test Case 2\nkx = 0\nky = 1\na = 0.5\nt1 = 1\nt2 = 0.2\nphi = 1\nm = 1\nassert np.allclose(calc_hamiltonian(kx, ky, a, t1, t2, phi, m), target)\n</code></pre> <pre><code># Test Case 3\nkx = 1\nky = 0\na = 0.5\nt1 = 1\nt2 = 0.2\nphi = 1\nm = 1\nassert np.allclose(calc_hamiltonian(kx, ky, a, t1, t2, phi, m), target)\n</code></pre> 1.2 Calculate the Chern number using the Haldane Hamiltonian, given the grid size $\\delta$ for discretizing the Brillouin zone in the $k_x$ and $k_y$ directions (assuming the grid sizes are the same in both directions), the lattice spacing $a$, the nearest-neighbor coupling constant $t_1$, the next-nearest-neighbor coupling constant $t_2$, the phase $\\phi$ for the next-nearest-neighbor hopping, and the on-site energy $m$.</p> <p>Scientists Annotated Background: Source: Fukui, Takahiro, Yasuhiro Hatsugai, and Hiroshi Suzuki. \"Chern numbers in discretized Brillouin zone: efficient method of computing (spin) Hall conductances.\" Journal of the Physical Society of Japan 74.6 (2005): 1674-1677.</p> <p>Here we can discretize the two-dimensional Brillouin zone into grids with step $\\delta {k_x} = \\delta {k_y} = \\delta$. If we define the U(1) gauge field on the links of the lattice as $U_\\mu (\\mathbf{k}_l) := \\frac{\\left\\langle n(\\mathbf{k}_l)\\middle|n(\\mathbf{k}_l + \\hat{\\mu})\\right\\rangle}{\\left|\\left\\langle n(\\mathbf{k}_l)\\middle|n(\\mathbf{k}_l + \\hat{\\mu})\\right\\rangle\\right|}$, where $\\left|n(\\mathbf{k}_l)\\right\\rangle$ is the eigenvector of Hamiltonian at $\\mathbf{k}_l$, $\\hat{\\mu}$ is a small displacement vector in the direction $\\mu$ with magnitude $\\delta$, and $\\mathbf{k}_l$ is one of the momentum space lattice points $l$. The corresponding curvature (flux) becomes</p> <p>$$ F_{xy}(\\mathbf{k}_l) := \\ln \\left[U_x(\\mathbf{k}_l)U_y(\\mathbf{k}_l+\\hat{x})U_x^{-1}(\\mathbf{k}_l+\\hat{y})U_y^{-1}(\\mathbf{k}_l)\\right] $$</p> <p>and the Chern number of a band can be calculated as</p> <p>$$ c = \\frac{1}{2\\pi i} \\Sigma_l F_{xy}(\\mathbf{k}l), $$ where the summation is over all the lattice points $l$. Note that the Brillouin zone of a hexagonal lattice with spacing $a$ can be chosen as a rectangle with $0 \\le {k_x} \\le k = 4\\pi /(3a)$. <pre><code>def compute_chern_number(delta, a, t1, t2, phi, m):\n    \"\"\"\n    Function to compute the Chern number with a given set of parameters.\n\n    Inputs:\n    delta : float\n        The grid size in kx and ky axis for discretizing the Brillouin zone.\n    a : float\n        The lattice spacing, i.e., the length of one side of the hexagon.\n    t1 : float\n        The nearest-neighbor coupling constant.\n    t2 : float\n        The next-nearest-neighbor coupling constant.\n    phi : float\n        The phase ranging from -\u03c0 to \u03c0.\n    m : float\n        The on-site energy.\n\n    Output:\n    chern_number : float\n        The Chern number, a real number that should be close to an integer. The imaginary part is cropped out due to the negligible magnitude.\n    \"\"\"\n</code></pre>} = 2\\sqrt 3 \\pi /(3a),0 \\le {k_y} \\le k_{y0</p> <pre><code># test case 1\ndelta = 2 * np.pi / 200\na = 1\nt1 = 4\nt2 = 1\nphi = 1\nm = 1\nassert np.allclose(compute_chern_number(delta, a, t1, t2, phi, m), target)\n</code></pre> <pre><code># test case 2\ndelta = 2 * np.pi / 100\na = 1\nt1 = 1\nt2 = 0.3\nphi = -1\nm = 1\nassert np.allclose(compute_chern_number(delta, a, t1, t2, phi, m), target)\n</code></pre> <pre><code># test case 3\ndelta = 2 * np.pi / 100\na = 1\nt1 = 1\nt2 = 0.2\nphi = 1\nm = 1\nassert np.allclose(compute_chern_number(delta, a, t1, t2, phi, m), target)\n</code></pre> <p>1.3 Make a 2D array of Chern numbers by sweeping the parameters: the on-site energy to next-nearest-neighbor coupling ratio ($m/t_2$ from -6 to 6 with $N$ samples) and phase ($\\phi$ from -$\\pi$ to $\\pi$ with $N$ samples) values. Given the grid size $\\delta$ for discretizing the Brillouin zone in the $k_x$ and $k_y$ directions (assuming the grid sizes are the same in both directions), the lattice spacing $a$, the nearest-neighbor coupling constant $t_1$, and the next-nearest-neighbor coupling constant $t_2$. <pre><code>def compute_chern_number_grid(delta, a, t1, t2, N):\n    \"\"\"\n    Function to calculate the Chern numbers by sweeping the given set of parameters and returns the results along with the corresponding swept next-nearest-neighbor coupling constant and phase.\n\n    Inputs:\n    delta : float\n        The grid size in kx and ky axis for discretizing the Brillouin zone.\n    a : float\n        The lattice spacing, i.e., the length of one side of the hexagon.\n    t1 : float\n        The nearest-neighbor coupling constant.\n    t2 : float\n        The next-nearest-neighbor coupling constant.\n    N : int\n        The number of sweeping grid points for both the on-site energy to next-nearest-neighbor coupling constant ratio and phase.\n\n    Outputs:\n    results: matrix of shape(N, N)\n        The Chern numbers by sweeping the on-site energy to next-nearest-neighbor coupling constant ratio (m/t2) and phase (phi).\n    m_values: array of length N\n        The swept on-site energy to next-nearest-neighbor coupling constant ratios.\n    phi_values: array of length N\n        The swept phase values.\n    \"\"\"\n</code></pre></p>"},{"location":"#domain-specific-test-cases","title":"Domain Specific Test Cases","text":"<p>Both the $k$-space and sweeping grid sizes are set to very rough values to make the computation faster, feel free to increase them for higher accuracy.</p> <p>At zero on-site energy, the Chern number is 1 for $\\phi &gt; 0$, and the Chern number is -1 for $\\phi &lt; 0$.</p> <p>For complementary plots, we can see that these phase diagrams are similar to the one in the original paper: Fig.2 in Haldane, F. D. M. (1988). To achieve a better match, decrease all grid sizes.</p> <p>Compare the following three test cases. We can find that the phase diagram is independent of the value of $t_1$, and the ratio of $t_2/t_1$, which is consistent with our expectations.</p> <p><pre><code># Test Case 1\ndelta = 2 * np.pi / 30\na = 1.0\nt1 = 4.0\nt2 = 1.0\nN = 40\n</code></pre> </p> <p><pre><code># Test Case 2\ndelta = 2 * np.pi / 30\na = 1.0\nt1 = 5.0\nt2 = 1.0\nN = 40\n</code></pre> </p> <p><pre><code># Test Case 3\ndelta = 2 * np.pi / 30\na = 1.0\nt1 = 1.0\nt2 = 0.2\nN = 40\n</code></pre> </p>"},{"location":"_footer/","title":"footer","text":"<ul> <li> <p> Something broken?  Report bug</p> </li> <li> <p> Something unclear?  Ask question</p> </li> </ul>"},{"location":"leaderboard/","title":"Leaderboard","text":"<p> date author model score 240712 scicode gpt4 0.8 240712 scicode gpt4o 0.8 <p></p> <p>How to submit</p> <p>Want to submit your own model? Head over to the documentation.</p>"},{"location":"leaderboard_table/","title":"Leaderboard table","text":"date author model score 240712 scicode gpt4 0.8 240712 scicode gpt4o 0.8"}]}